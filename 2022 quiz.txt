1.	Why are multiple inheritances not supported in Java?
A.	Ruby problem
B.	Diamond problem
C.	Emerald problem
D.	SOLID principle
2.	Why is String immutable in Java?
A.	caching, security, synchronicity, and performance
B.	helps for reflection purposes
C.	enables threading
D.	no longer need to use legacy character arrays
3.	Can you override the static method in Java? if I create the same method in the subclass is it a 
compile-time error?
A.	Yes
B.	no
4: What do the expression 1.0 / 0.0 will return?
a.	0
b.	ArithmeticException
c.	NaN value
d.	Double.INFINITY
Q1: What is JVM? Why is Java called the ?Platform Independent Programming Language??
A Java virtual machine (JVM) is a process virtual machine that can execute Java bytecode. Each Java 
source file is compiled into a bytecode file, which is executed by the JVM. Java was designed to allow 
application programs to be built that could be run on any platform, without having to be rewritten or 
recompiled by the programmer for each separate platform. A Java virtual machine makes this possible, 
because it is aware of the specific instruction lengths and other particularities of the underlying 
hardware platform.
Q12: Can == be used on enum?
A.	Yes - correct
B.	No
Q16: Is Java ?pass-by-reference? or ?pass-by-value??
A.	Pass by reference
B.	Pass by value
C.	Neither
Java is always pass-by-value. Unfortunately, when we pass the value of an object, we are passing the 
reference to it. There is no such thing as "pass-by-reference" in Java. This is confusing to beginners.

Q18: State the features of an interface.
An interface is a template that contains only the signature of methods. The signature of a method 
consists of the numbers of parameters, the type of parameter (value, reference, or output), and the 
order of parameters. An interface has no implementation on its own because it contains only the 
definition of methods without any method body. An interface is defined using the interface keyword. 
Moreover, you cannot instantiate an interface. The various features of an interface are as follows:

An interface is used to implement multiple inheritance in code. This feature of an interface is quite 
different from that of abstract classes because a class cannot derive the features of more than one class 
but can easily implement multiple interfaces.
It defines a specific set of methods and their arguments.
Variables in interface must be declared as public, static, and final while methods must be public and 
abstract.
A class implementing an interface must implement all of its methods.
An interface can derive from more than one interface.
Having Tech or Coding Interview? Check ?? 54 OOP Interview Questions
Q19: What are the differences between == and equals?
As a reminder, it needs to be said that generally, == is NOT a viable alternative to equals. When it is, 
however (such as with enum), there are two important differences to consider:

== never throws NullPointerException
enum Color { BLACK, WHITE };

Color nothing = null;
if (nothing == Color.BLACK);      // runs fine
if (nothing.equals(Color.BLACK)); // throws NullPointerEx
== is subject to type compatibility check at compile time
enum Color { BLACK, WHITE };
enum Chiral { LEFT, RIGHT };

if (Color.BLACK.equals(Chiral.LEFT)); // compiles fine
if (Color.BLACK == Chiral.LEFT);      // DOESN'T COMPILE!!! Incompatible types!
Having Tech or Coding Interview? Check ?? 147 Java Interview Questions
Q20: What are the differences between continuous integration, continuous delivery, and continuous 
deployment?
Developers practicing continuous integration merge their changes back to the main branch as often as 
possible. By doing so, you avoid the integration hell that usually happens when people wait for release 
day to merge their changes into the release branch.
Continuous delivery is an extension of continuous integration to make sure that you can release new 
changes to your customers quickly in a sustainable way. This means that on top of having automated 
your testing, you also have automated your release process and you can deploy your application at any 
point of time by clicking on a button.
Continuous deployment goes one step further than continuous delivery. With this practice, every 
change that passes all stages of your production pipeline is released to your customers. There's no 
human intervention, and only a failed test will prevent a new change to be deployed to production.
Having Tech or Coding Interview? Check ?? 44 DevOps Interview Questions
Q21: What do the ... dots in the method parameters mean?
What do the 3 dots in the following method mean?

public void myMethod(String... strings){
    // method body
}
Answer
That feature is called varargs, and it's a feature introduced in Java 5. It means that function can receive 
multiple String arguments:

myMethod("foo", "bar");
myMethod("foo", "bar", "baz");
myMethod(new String[]{"foo", "var", "baz"}); // you can eve
Then, you can use the String var as an array:

public void myMethod(String... strings){
    for(String whatever : strings){
        // do what ever you want
    }

    // the code above is is equivalent to
    for( int i = 0; i < strings.length; i++){
        // classical for. In this case you use strings[i]
    }
}
Having Tech or Coding Interview? Check ?? 147 Java Interview Questions
Q25: What is difference between fail-fast and fail-safe?
The Iterator's fail-safe property works with the clone of the underlying collection and thus, it is not 
affected by any modification in the collection. All the collection classes in java.util package are fail-fast, 
while the collection classes in java.util.concurrent are fail-safe. Fail-fast iterators throw a 
ConcurrentModificationException, while fail-safe iterator never throws such an exception.
Q28: What is the volatile keyword useful for?
volatile has semantics for memory visibility. Basically, the value of a volatile field becomes visible to all 
readers (other threads in particular) after a write operation completes on it. Without volatile, readers 
could see some non-updated value.
Q47: What's wrong with Double Brace initialization in Java?
Q: What do the expression 1.0 / 0.0 will return? will it throw Exception? any compile-time error?
Q: Why is 0.1 * 3 != 0.3
